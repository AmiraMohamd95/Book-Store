-- MySQL Script generated by MySQL Workbench
-- 28 أبر, 2017 EET 06:25:29 م
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
drop SCHEMA mydb;
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Publisher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Publisher` (
  `Name` VARCHAR(15) NOT NULL,
  `Address` VARCHAR(45) NULL,
  `Telephone` VARCHAR(15) NULL,
  PRIMARY KEY (`Name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Book` (
  `ISBN` VARCHAR(15) NOT NULL,
  `Title` VARCHAR(15) NOT NULL,
  `Price` INT NOT NULL,
  `Category` VARCHAR(15) NOT NULL , 
  `Publication_Year` DATE NOT NULL,
  `Threshold` INT NOT NULL,
  `Quantity` INT NOT NULL,
  `Publisher_Name` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`ISBN`),
  UNIQUE INDEX `ISBN_UNIQUE` (`ISBN` ASC),
  INDEX `fk_Book_Publisher1_idx` (`Publisher_Name` ASC),
  CONSTRAINT `fk_Book_Publisher1`
    FOREIGN KEY (`Publisher_Name`)
    REFERENCES `mydb`.`Publisher` (`Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Author` (
  `Name` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`Name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Book_has_Author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Book_has_Author` (
  `Book_ISBN` VARCHAR(15) NOT NULL,
  `Author_Name` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`Book_ISBN`, `Author_Name`),
  INDEX `fk_Book_has_Author_Author1_idx` (`Author_Name` ASC),
  INDEX `fk_Book_has_Author_Book1_idx` (`Book_ISBN` ASC),
  CONSTRAINT `fk_Book_has_Author_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `mydb`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Book_has_Author_Author1`
    FOREIGN KEY (`Author_Name`)
    REFERENCES `mydb`.`Author` (`Name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Manager_Order` (
  `no_of_copies` INT NOT NULL,
  `OrderID` INT NOT NULL AUTO_INCREMENT,
  `Book_ISBN` VARCHAR(15) NOT NULL,
   `confirm` boolean not null,
  PRIMARY KEY (`OrderID`, `Book_ISBN`),
  INDEX `fk_Order_Book1_idx` (`Book_ISBN` ASC),
  CONSTRAINT `fk_Order_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `mydb`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;
alter table Manager_Order 
	 ALTER COLUMN confirm SET DEFAULT false;


-- -----------------------------------------------------
-- Table `mydb`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`User` (
  `User_name` VARCHAR(15) NOT NULL,
  `Fname` VARCHAR(15) NOT NULL,
  `Lname` VARCHAR(15) NOT NULL,
  `Email` VARCHAR(100) NOT NULL,
  `Password` VARCHAR(15) NOT NULL,
  `Phone_number` VARCHAR(15) NULL,
  `Shipping_address` VARCHAR(45) NOT NULL,
   `access` VARCHAR(15) NOT NULL,

  PRIMARY KEY (`Email`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`User_has_inCart`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`User_has_inCart` (
  `User_Email` VARCHAR(100) NOT NULL,
  `Book_ISBN` VARCHAR(15) NOT NULL,
  `no_of_copies` INT NOT NULL,
  PRIMARY KEY (`User_Email`, `Book_ISBN`),
  INDEX `fk_User_has_Book_Book1_idx` (`Book_ISBN` ASC),
  INDEX `fk_User_has_Book_User1_idx` (`User_Email` ASC),
  CONSTRAINT `fk_User_has_Book_User1`
    FOREIGN KEY (`User_Email`)
    REFERENCES `mydb`.`User` (`Email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Book_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `mydb`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Purchases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Purchases` (
  `User_Email` VARCHAR(100) NOT NULL,
  `Book_ISBN` VARCHAR(15) NOT NULL,
  `no_of_copies` VARCHAR(45) NOT NULL,
  `date` DATE NOT NULL,
  PRIMARY KEY (`User_Email`, `Book_ISBN`),
  INDEX `fk_User_has_Book1_Book1_idx` (`Book_ISBN` ASC),
  INDEX `fk_User_has_Book1_User1_idx` (`User_Email` ASC),
  CONSTRAINT `fk_User_has_Book1_User1`
    FOREIGN KEY (`User_Email`)
    REFERENCES `mydb`.`User` (`Email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Book1_Book1`
    FOREIGN KEY (`Book_ISBN`)
    REFERENCES `mydb`.`Book` (`ISBN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Credit_card`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Credit_card` (
  `ccn` INT NOT NULL,
  `Expire_Date` DATE NOT NULL,
  `User_Email` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`ccn`, `User_Email`),
  INDEX `fk_Credit_card_User1_idx` (`User_Email` ASC),
  CONSTRAINT `fk_Credit_card_User1`
    FOREIGN KEY (`User_Email`)
    REFERENCES `mydb`.`User` (`Email`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- check email
-- alter table User add constraint check_email check (Email like '%_@__%.__%');

-- check max number of tuple in book
 DELIMITER $$

CREATE TRIGGER  Max_books
BEFORE INSERT
ON Book
FOR EACH ROW
BEGIN
  SELECT COUNT(*) INTO @cnt FROM Book;
  IF @cnt >= 999999 THEN
    CALL raise_error;-- raise an error
  END IF;
END
$$
DELIMITER ;

-- check max number of authors

DELIMITER $$

CREATE TRIGGER Avg_authors
BEFORE INSERT
ON Book_has_Author
FOR EACH ROW
BEGIN
  SELECT COUNT(*) INTO @cnt FROM Book_has_Author;
  IF @cnt >= 999999 THEN
    CALL raise_error;-- raise an error
  END IF;
END
$$
DELIMITER ;


-- check negativity of book count

DELIMITER $$

CREATE TRIGGER negative_constrain BEFORE update ON Book
FOR EACH ROW BEGIN
   IF (NEW.Quantity < 0) THEN
         CALL raise_error;-- raise an error
   END IF;
END$$
DELIMITER ;


DELIMITER $$
-- check if quantity is less than a threshold
CREATE TRIGGER threshold AFTER update ON Book

FOR EACH ROW BEGIN

   IF (NEW.Quantity < OLD.Threshold) THEN
         insert into mydb.Manager_Order (no_of_copies , Book_ISBN)
         values(20 , OLD.ISBN);
   END IF;
END$$
DELIMITER ;

DELIMITER $$
-- check if quantity is less than a threshold
CREATE TRIGGER threshold1 AFTER insert ON Book

FOR EACH ROW BEGIN

   IF (NEW.Quantity < new.Threshold) THEN
         insert into mydb.Manager_Order (no_of_copies , Book_ISBN)
         values(20 , new.ISBN);
   END IF;
END$$
DELIMITER ;


DELIMITER $$

CREATE TRIGGER categoryDomain1 BEFORE insert ON Book

FOR EACH ROW BEGIN
   IF (NEW.Category !='Science' and NEW.Category !='Art' and NEW.Category !='Religion' and 
   NEW.Category != 'History' and NEW.Category != 'Geography') THEN
             CALL raise_error;
   END IF;
END$$
DELIMITER ;


DELIMITER $$

CREATE TRIGGER categoryDomain2 BEFORE UPDATE ON Book

FOR EACH ROW BEGIN
   IF (NEW.Category !='Science' and NEW.Category !='Art' and NEW.Category !='Religion' and 
   NEW.Category != 'History' and NEW.Category != 'Geography') THEN
             CALL raise_error;
   END IF;
END$$
DELIMITER ;

DELIMITER $$

CREATE TRIGGER EmailDomain BEFORE UPDATE ON User

FOR EACH ROW BEGIN
   IF (NEW.Email NOT LIKE '%_@_%._%' ) THEN
             CALL raise_error;
   END IF;
END$$
DELIMITER ;

DELIMITER $$

CREATE TRIGGER EmailDomain1 BEFORE insert ON User

FOR EACH ROW BEGIN
   IF (NEW.Email NOT LIKE '%_@_%._%' ) THEN
             CALL raise_error;
   END IF;
END$$
DELIMITER ;

-- DELsIMITER $$

-- CREATE TRIGGER confirm_order BEFORE DELETE ON Manager_Order

-- FOR EACH ROW BEGIN
--    update Book set Quantity = OLD.no_of_copies + Quantity
--    where OLD.Book_ISBN = ISBN;
-- END$$
-- DELIMITER ;
-- 






  
 insert into Publisher values('Gehad','alex','3090366'); 
 insert into Publisher values('name','alex','3090366'); 
 insert into Publisher values('rewan','alex','3090366'); 


insert into Book values('1' ,'tiltle',100,'Art', '2016-01-01',10,3 ,'Gehad');
insert into Book values('2' ,'tiltle2',200,'Art', '2016-01-01',10,4 ,'Gehad');
insert into Book values('3' ,'tiltle3',300,'Art', '2016-01-01',10,5 ,'Gehad');
insert into Book values('4' ,'tiltle4',400,'Art', '2016-01-01',10,6 ,'Gehad');
insert into Book values('5' ,'tiltle5',500,'Art', '2016-01-01',20,7 ,'Gehad');
insert into Book values('6' ,'tiltle6',600,'Art', '2016-01-01',20,8 ,'Gehad');
insert into Book values('7' ,'tiltle7',700,'Art', '2016-01-01',20,5 ,'Gehad');
insert into Book values('8' ,'tiltle8',800,'Art', '2016-01-01',20,6 ,'Gehad');
insert into Book values('9' ,'tiltle9',900,'Art', '2016-01-01',20,3 ,'Gehad');
insert into Book values('10' ,'tiltle10',1000,'Art', '2016-01-01',20,4 ,'Gehad');
insert into Book values('11' ,'tiltle11',1100,'Art', '2016-01-01',20,5 ,'Gehad');
insert into Book values('12' ,'tiltle12',1200,'Art', '2016-01-01',20,6 ,'Gehad');


insert into User values ('gehad-fathy','gehad','fathy','gehadfathy99@gmail.com','01207969869','000000','address','user');
insert into User values ('rewan-alaa','rewan','alaa','rewanalaa99@gmail.com','012000000','000000','address','user');
insert into User values ('amira','amira','mohamed','amiramohamed99@gmail.com','01207969869','000000','address','user');
insert into User values ('esraa','esraa','hashih','esraahashish@gmail.com','010','000000','address','user');
insert into User values ('sherook--','Sherook','hossam','sherookhossam@gmail.com','0111111','000000','address','user');
insert into User values ('Shadwa--','shadwa','mobdyy','shadwa@gmail.com','222222','000000','address','user');
insert into User values ('Salma','Salma','abdelaziz','salma@gmail.com','0120777777','000000','address','user');
insert into User values ('Mayar','mayar','abdelaziz','mayar99@gmail.com','01111111555','000000','address','user');

insert into Purchases values  ('amiramohamed99@gmail.com' ,'2' ,150 ,'2017-05-02') ;
insert into Purchases values  ('esraahashish@gmail.com' ,'2' ,10 ,'2017-05-02') ;
insert into Purchases values  ('esraahashish@gmail.com' ,'3' ,20 ,'2017-05-02') ;
insert into Purchases values  ('gehadfathy99@gmail.com' ,'1' ,1 ,'2017-05-02') ;
insert into Purchases values  ('gehadfathy99@gmail.com' ,'2' ,2 ,'2017-05-02') ;
insert into Purchases values  ('gehadfathy99@gmail.com' ,'3' ,3 ,'2017-05-02') ;
insert into Purchases values  ('mayar99@gmail.com' ,'2' ,300 ,'2017-05-02') ; 
insert into Purchases values  ('salma@gmail.com' ,'2' ,1 ,'2017-05-02') ; 
insert into Purchases values  ('shadwa@gmail.com' ,'2' ,1 ,'2017-05-02') ; 
insert into Purchases values  ('sherookhosam@gmail.com' ,'2' ,1 ,'2017-05-02') ; 
 

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
